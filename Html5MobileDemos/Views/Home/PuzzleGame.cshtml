@{
    ViewBag.Title = "Puzzle Game";
}

<div class="buttons">
    <button class="btn recevier">Receiver</button>


</div>

<div class="row data">

</div>

@section scripts
{
    <script src="~/Scripts/sense.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/Scripts/Box2dWeb-2.1.a.3.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function() {
            var _s = sense.init();
            var mobileDemo = $.connection.mobileDemoHub;
            var playerOneRotation = 0;
            var playerTwoRotation = 0;
            var playerOneId = "";
            var playerTwoId = "";
            var CANVAS_WIDTH = 1000;
            var CANVAS_HEIGHT = 1000;
            var SCALE = 30,
                DEG_TO_RAD = 0.0174532925;

            $(".recevier").click(function() {
                $(".data").html(getServerNameHtml());

                function getServerNameHtml() {
                    var $container = $("<div/>");
                    $container.append($("<input/>").addClass("server-name"));
                    $container.append($("<button/>").addClass("btn").text("Create Server").click(function() {
                        var name = $(".server-name").val();
                        mobileDemo.server.createServer(name);
                        $container.remove();
                        init();
                    }));
                    return $container;
                }


                mobileDemo.client.receiveConnection = function(id) {
                    if (playerOneId === "") {
                        playerOneId = id;
                        $(".connected-players").text("1 player connected");
                    }
                    else if (playerTwoId === "") {
                        playerTwoId = id;
                        $(".connected-players").text("2 players connected");
                    }
                }

                mobileDemo.client.receiveRotationData = function(data) {
                    if (playerOneId == data.connectionId) {
                        playerOneRotation = -data.rotation.alpha;
                    }
                    if (playerTwoId == data.connectionId) {
                        playerTwoRotation = -data.rotation.alpha;
                    }

                }

                $.connection.hub.start().then(function() {
                    $(".buttons").remove();

                });
            });

            var world,
                canvas,
                canvasContext,
                playerOneLevers = [],
                playerTwoLevers = [],
                    ball;

            var b2Vec2 = Box2D.Common.Math.b2Vec2;
            //var b2AABB = Box2D.Collision.b2AABB;
            var b2BodyDef = Box2D.Dynamics.b2BodyDef;
            var b2Body = Box2D.Dynamics.b2Body;
            var b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
            //var b2Fixture = Box2D.Dynamics.b2Fixture;
            var b2World = Box2D.Dynamics.b2World;
            var b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
            var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
            var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

            

            var Lever = function(box2dWorld, centerX, centerY, startingAngle) {
                this.startingAngle = startingAngle;
                var kinematicDef = new b2BodyDef;
                kinematicDef.type = b2Body.b2_kinematicBody;
                var fixDef = new b2FixtureDef;
                fixDef.shape = new b2PolygonShape();
                fixDef.shape.SetAsBox(150 / SCALE / 2, 20 / SCALE / 2);
                kinematicDef.position.x = centerX / SCALE;
                kinematicDef.position.y = centerY / SCALE;
                this.body = box2dWorld.CreateBody(kinematicDef);

                this.body.CreateFixture(fixDef);
                this.body.SetAngle(startingAngle);
            }

            Lever.prototype.SetAngle = function (angle) {
                this.body.SetAngle(angle + this.startingAngle);
            }

            Lever.prototype.GetAngle = function () {
                return this.body.GetAngle() - this.startingAngle;
            }

            var Ball = function(box2dWorld, centerX, centerY) {
                var fixDef = new b2FixtureDef;
                fixDef.density = 1.0;
                fixDef.friction = 0.5;
                fixDef.restitution = 0.2;

                var bodyDef = new b2BodyDef;
                bodyDef.type = b2Body.b2_dynamicBody;

                fixDef.shape = new b2CircleShape(10 / SCALE);
                bodyDef.position.x = centerX / SCALE;
                bodyDef.position.y = centerY / SCALE;
                var body = box2dWorld.CreateBody(bodyDef);
                    body.CreateFixture(fixDef);
                this.body = body;
            }

            function startGame() {
                ball = new Ball(world, 100, 100);
            }

            function setUpCanvas() {
                var $data = $(".data");
                var $container = $("<div/>");
                
                $container.append($("<button/>").addClass("start-button").text("start").click(function () {
                    startGame();
                    $(this).attr('disabled', 'disabled');
                }));
                $container.append($("<span/>").addClass("connected-players"));
                $data.html($container);
                canvas = document.createElement("canvas");
                canvas.width = CANVAS_WIDTH;
                canvas.height = CANVAS_HEIGHT;

                $data.append($(canvas));

                canvasContext = canvas.getContext("2d");
            }

            

            var init = function() {


                setUpCanvas();

                world = new b2World(new b2Vec2(0, 10.0), false);

                


                playerOneLevers.push(new Lever(world, 100, 200, 0));
                playerTwoLevers.push(new Lever(world, 240, 300, 1));
                playerOneLevers.push(new Lever(world, 380, 400, 2));
                playerTwoLevers.push(new Lever(world, 520, 500, 3));
                playerOneLevers.push(new Lever(world, 660, 600, 4));
                playerTwoLevers.push(new Lever(world, 800, 700, 5));

                debugDraw();
                window.requestAnimationFrame(update);
            }

            function debugDraw() {
                var dDraw = new b2DebugDraw();
                dDraw.SetSprite(canvasContext);
                dDraw.SetDrawScale(SCALE);
                dDraw.SetFillAlpha(0.5);
                dDraw.SetLineThickness(1.0);
                dDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
                world.SetDebugDraw(dDraw);
            }

            function checkEndGame() {
                if (typeof ball !== 'undefined' && ball.body.GetPosition().x * SCALE > CANVAS_WIDTH) {
                    alert("you win");
                    $(".start-button").removeAttr("disabled");
                    return true;
                    
                } else if (typeof ball !== 'undefined' && (ball.body.GetPosition().y * SCALE > CANVAS_HEIGHT || ball.body.GetPosition().x < 0)) {
                    alert("you lose");
                    $(".start-button").removeAttr("disabled");
                    return true;
                }

            }


            function draw() {

            }

            function update() {
                for (var i = 0; i < playerOneLevers.length; i++) {
                    playerOneLevers[i].SetAngle(playerOneRotation * DEG_TO_RAD);
                }
                for (var i = 0; i < playerTwoLevers.length; i++) {
                    playerTwoLevers[i].SetAngle(playerTwoRotation * DEG_TO_RAD);
                }
                world.Step(
                    1 / 60 //frame-rate
                    , 10 //velocity iterations
                    , 10 //position iterations
                );
                world.DrawDebugData();
                world.ClearForces();
                if (checkEndGame()) {
                    world.DestroyBody(ball);
                    ball = undefined;
                }

                window.requestAnimationFrame(update);
                
            };






        });
    </script>
}
